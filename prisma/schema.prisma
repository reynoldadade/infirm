// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  familyName  String 
  firstName String
  otherNames String
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  activated Boolean @default(false)

  // Relations
  appointmentsAsPatient Appointment[] @relation("PatientAppointments")
  appointmentsAsDoctor  Appointment[] @relation("DoctorAppointments")
  medicalRecords        MedicalRecord[]
  messagesSent          Message[] @relation("SenderMessages")
  messagesReceived      Message[] @relation("ReceiverMessages")
  payments              Payment[]
}

enum Role {
  PATIENT
  DOCTOR
  ADMIN
}

model Appointment {
  id              String   @id @default(uuid())
  patientId       String
  doctorId        String
  appointmentDate DateTime
  status          AppointmentStatus @default(PENDING)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  patient User @relation("PatientAppointments", fields: [patientId], references: [id])
  doctor  User @relation("DoctorAppointments", fields: [doctorId], references: [id])
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

model MedicalRecord {
  id        String   @id @default(uuid())
  patientId String
  diagnosis String
  prescription String?
  fileUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  patient User @relation(fields: [patientId], references: [id])
}

model Payment {
  id        String   @id @default(uuid())
  patientId String
  amount    Float
  status    PaymentStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  patient User @relation(fields: [patientId], references: [id])
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Message {
  id        String   @id @default(uuid())
  senderId  String
  receiverId String
  content   String
  createdAt DateTime @default(now())

  // Relations
  sender   User @relation("SenderMessages", fields: [senderId], references: [id])
  receiver User @relation("ReceiverMessages", fields: [receiverId], references: [id])
}